@page "/weather"
@inject HttpClient Http

@if (weatherLoaded)
{
    <h1>
        @ziplookup.Places[0].City, @ziplookup.Places[0].Stateabbr<br />
        @ConvertKtoF(currentCondition.Main.Temp, 1) &#176;F
    </h1>
    <h2>
        @currentCondition.Weather[0].Main <img src="@imgurl" style="display:inline" />
    </h2>
    <h3>
        <span style="display:inline;color:red">HI @ConvertKtoF(currentCondition.Main.Temp_max, 0)  &#176;F</span> /
        <span style="color:blue">LO @ConvertKtoF(currentCondition.Main.Temp_min, 0)  &#176;F</span><br />
    </h3>
    <br />
    @if (alerts.Features.Length > 0)
    {
        <h2>Alerts</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Alert</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var alert in alerts.Features)
                {
                    <tr>
                        <td>@alert.Properties.Effective.ToString("MM/dd/yyyy hh:mmt")</td>
                        <td>
                            <span style="font-weight:600">@alert.Properties.Headline</span><br />
                            <span>@alert.Properties.Description</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <h1>Weather Forecast</h1>
    <p>This component will retreive real-time data using the OpenWeather API.</p>
    <div class="input-group col-md-3">
        <input type="text" class="form-control" placeholder="Enter a Zipcode" bind="@zipcode" maxlength="5" />
        <div class="input-group-append">
            <button class="btn btn-primary" type="button" onclick="@GetWeather">Get Weather</button>
        </div>
    </div>
    <br /><span style="color:red">@errMessage</span>
}

@functions {
    string zipcode = string.Empty;
    string errMessage = string.Empty;
    string oWeatherURI = "http://api.openweathermap.org";
    string oWeatherAPI = "0e25dfeca63103d3a311c460a9e27548";
    string nwsBaseURI = "https://api.weather.gov";
    Models.CurrentConditions currentCondition;
    Models.Alert alerts;
    Models.ZipLookup ziplookup;
    string imgurl = "";
    bool weatherLoaded = false;

    private async Task GetWeather()
    {
       

        // get location info from zipcode
        try
        {
            errMessage = "";
            var zipresultStr = await Http.GetStringAsync($"http://api.zippopotam.us/US/{zipcode}");
            zipresultStr = zipresultStr.Replace("place name", "city").Replace("state abbreviation", "stateabbr");
            ziplookup =  Microsoft.JSInterop.Json.Deserialize<Models.ZipLookup>(zipresultStr);
        }
        catch
        {
            errMessage = "Invalid Zipcode";
            return;
        }

        // get current condition by zip
        currentCondition = await Http.GetJsonAsync<Models.CurrentConditions>($"{oWeatherURI}/data/2.5/weather?zip={zipcode},us&appid={oWeatherAPI}");
        imgurl = $"{oWeatherURI}/img/w/{currentCondition.Weather[0].Icon}.png";

        // retrieve nws alerts for state
        alerts = await Http.GetJsonAsync<Models.Alert>($"{nwsBaseURI}/alerts/active/area/{ziplookup.Places[0].Stateabbr}");

        weatherLoaded = true;
    }

    private decimal ConvertKtoF(decimal kelvin, int decimals)
    {
        return Math.Round(kelvin * 9 / 5 - 459.67M, decimals);
    }
}
